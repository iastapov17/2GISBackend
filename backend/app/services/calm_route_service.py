from typing import List, Dict, Tuple, Optional
from shapely.geometry import Polygon
from app.services.gis_service import get_gis_service
from app.services.map_service import MapService
from app.schemas.routing import CalmRouteRequest, CalmRouteResponse, Route, RouteMetrics, RouteGeometry, RouteExplanation
from app.schemas.map_layers import LayerType


class CalmRouteService:
    
    def __init__(self):
        self.gis_service = get_gis_service()
        self.map_service = MapService()
    
    async def build_calm_route(
        self, 
        request: CalmRouteRequest
    ) -> CalmRouteResponse:
        start = (request.start.lat, request.start.lon)
        end = (request.end.lat, request.end.lon)
        
        print(f"üó∫Ô∏è [CALM ROUTE] –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç: {start} -> {end}")
        
        base_route = await self.gis_service.get_route(
            start=start,
            end=end,
            profile="pedestrian"
        )

        if not base_route:
            return self._create_fallback_route(request)
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        bbox = self._get_route_bbox(base_route)
        problematic_polygons = await self._find_problematic_polygons(
            bbox, 
            request
        )
        
        if problematic_polygons:
            print(f"üö´ [CALM ROUTE] –ù–∞–π–¥–µ–Ω–æ {len(problematic_polygons)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
            
            merged_polygons = self._merge_intersecting_polygons(problematic_polygons)
            print(f"üîó [CALM ROUTE] –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≤ {len(merged_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
            
            exclude_polygons = [
                self.gis_service.create_exclude_polygon(polygon["coordinates"])
                for polygon in merged_polygons
            ][:20]
            print(f"‚úÖ [CALM ROUTE] –ò—Å–∫–ª—é—á–µ–Ω–∏—è: {len(exclude_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
            
            calm_route = await self.gis_service.get_route(
                start=start,
                end=end,
                profile="pedestrian",
                exclude_polygons=exclude_polygons
            )
            
            if calm_route:
                # print(f"‚úÖ [CALM ROUTE] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {calm_route}")
                print(f"‚úÖ [CALM ROUTE] –ü–æ—Å—Ç—Ä–æ–µ–Ω –º–∞—Ä—à—Ä—É—Ç —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏")
                return self._convert_route_to_response(calm_route, request)
            else:
                print(f"‚ö†Ô∏è [CALM ROUTE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
                return self._convert_route_to_response(base_route, request)
        else:
            print(f"‚úÖ [CALM ROUTE] –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç")
    
    async def _find_problematic_polygons(
        self, 
        bbox: Tuple[float, float, float, float],
        request: CalmRouteRequest
    ) -> List[Dict]:
        """
        –ù–∞–π—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ä—É—à–∞—é—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            bbox: –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ (lat_min, lon_min, lat_max, lon_max)
            request: –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        """
        problematic_polygons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞—Å—Ç–∏
        all_layers = await self.map_service.get_all_layers(
            layer_types=[LayerType.NOISE, LayerType.CROWD, LayerType.LIGHT, LayerType.PUDDLES],
            bbox=bbox
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
        for layer_type, features in all_layers.items():
            for feature in features:
                polygon = feature.geometry.coordinates[0]  # –ü–µ—Ä–≤–æ–µ –∫–æ–ª—å—Ü–æ
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ SegmentFeature
                metrics = {
                    "noise_db": feature.value if layer_type == LayerType.NOISE else 0,
                    "crowd_level": feature.value if layer_type == LayerType.CROWD else 0,
                    "light_lux": feature.value if layer_type == LayerType.LIGHT else 0,
                    "puddles": feature.value > 0.5 if layer_type == LayerType.PUDDLES else False
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if True:
                    problematic_polygons.append({
                        "id": feature.segment_id,
                        "type": layer_type,
                        "coordinates": polygon,
                        "reason":""
                    })
        
        return problematic_polygons
    
    def _merge_intersecting_polygons(self, polygons: List[Dict]) -> List[Dict]:
        """
        –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ–ª–∏–≥–æ–Ω—ã
        
        Args:
            polygons: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        
        Returns:
            —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        """
        if not polygons:
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Shapely –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        shapely_polygons = []
        for i, poly in enumerate(polygons):
            try:
                coords = poly["coordinates"]
                
                if isinstance(coords, list) and len(coords) >= 3:
                    print(f"üîç [MERGE] –ü–æ–ª–∏–≥–æ–Ω {i}: {len(coords)} —Ç–æ—á–µ–∫")
                    if isinstance(coords[0], list) and len(coords[0]) == 2:
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª–∏–≥–æ–Ω –∑–∞–º–∫–Ω—É—Ç
                        if coords[0] != coords[-1]:
                            coords = coords + [coords[0]]
                        
                        shapely_poly = Polygon(coords)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º coords –Ω–∞–ø—Ä—è–º—É—é
                        shapely_polygons.append({
                            "index": i,
                            "polygon": shapely_poly,
                            "original": poly
                        })
                    else:
                        print(f"‚ö†Ô∏è [MERGE] –ü–æ–ª–∏–≥–æ–Ω {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (coords[0] = {coords[0] if coords else 'None'})")
                else:
                    print(f"‚ö†Ô∏è [MERGE] –ü–æ–ª–∏–≥–æ–Ω {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (coords = {coords})")
            except Exception as e:
                print(f"‚ö†Ô∏è [MERGE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ {i}: {e}, coords = {coords}")
                continue
        
        if not shapely_polygons:
            return polygons
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º
        groups = []
        used_indices = set()
        
        for i, poly_data in enumerate(shapely_polygons):
            if i in used_indices:
                continue
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            group = [poly_data]
            used_indices.add(i)
            
            # –ò—â–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å —Ç–µ–∫—É—â–∏–º
            for j, other_poly_data in enumerate(shapely_polygons):
                if j in used_indices or j == i:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                if poly_data["polygon"].intersects(other_poly_data["polygon"]):
                    group.append(other_poly_data)
                    used_indices.add(j)
            
            groups.append(group)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
        merged_polygons = []
        for group in groups:
            if len(group) == 1:
                # –û–¥–∏–Ω –ø–æ–ª–∏–≥–æ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                merged_polygons.append(group[0]["original"])
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                try:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ
                    union_polygon = group[0]["polygon"]
                    for poly_data in group[1:]:
                        union_polygon = union_polygon.union(poly_data["polygon"])
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                    if hasattr(union_polygon, 'exterior'):
                        coords = list(union_polygon.exterior.coords)
                        
                        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é
                        if coords[0] == coords[-1]:
                            coords = coords[:-1]
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª–∏–≥–æ–Ω –∑–∞–º–∫–Ω—É—Ç (–ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
                        if coords[0] != coords[-1]:
                            coords.append(coords[0])
                        
                        merged_polygon = {
                            "id": f"merged_{len(merged_polygons)}",
                            "type": "merged",
                            "coordinates": coords,
                            "reason": f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(group)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤"
                        }
                        merged_polygons.append(merged_polygon)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
                        merged_polygons.append(group[0]["original"])
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è [MERGE] –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
                    merged_polygons.append(group[0]["original"])
        
        return merged_polygons
    
    def _violates_filters(
        self, 
        metrics: Dict, 
        request: CalmRouteRequest, 
        layer_type: LayerType
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ä—É—à–∞–µ—Ç –ª–∏ –ø–æ–ª–∏–≥–æ–Ω —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            metrics: –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
            request: –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            layer_type: —Ç–∏–ø —Å–ª–æ—è
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª–∏–≥–æ–Ω –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã
        """
        avoid = request.profile.avoid
        
        if layer_type == LayerType.NOISE:
            noise_db = metrics.get("noise_db", 0)
            return avoid.noise_above_db and noise_db > avoid.noise_above_db
        
        elif layer_type == LayerType.CROWD:
            crowd_level = metrics.get("crowd_level", 0)
            return avoid.crowd_level_above and crowd_level > avoid.crowd_level_above
        
        elif layer_type == LayerType.PUDDLES:
            has_puddles = metrics.get("puddles", False)
            return avoid.puddles and has_puddles
        
        elif layer_type == LayerType.LIGHT:
            light_lux = metrics.get("light_lux", 0)
            return avoid.light_below_lux and light_lux < avoid.light_below_lux
        
        return False
    
    def _get_violation_reason(
        self, 
        metrics: Dict, 
        request: CalmRouteRequest, 
        layer_type: LayerType
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        avoid = request.profile.avoid
        
        if layer_type == LayerType.NOISE:
            noise_db = metrics.get("noise_db", 0)
            return f"–®—É–º {noise_db}–¥–ë > {avoid.noise_above_db}–¥–ë"
        
        elif layer_type == LayerType.CROWD:
            crowd_level = metrics.get("crowd_level", 0)
            return f"–¢–æ–ª–ø–∞ {crowd_level} > {avoid.crowd_level_above}"
        
        elif layer_type == LayerType.PUDDLES:
            return "–ï—Å—Ç—å –ª—É–∂–∏"
        
        elif layer_type == LayerType.LIGHT:
            light_lux = metrics.get("light_lux", 0)
            return f"–û—Å–≤–µ—â–µ–Ω–∏–µ {light_lux}–ª–∫ < {avoid.light_below_lux}–ª–∫"
        
        return "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"
    
    def _get_route_bbox(self, route: Dict) -> Tuple[float, float, float, float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å bounding box –º–∞—Ä—à—Ä—É—Ç–∞
        
        Args:
            route: –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç 2GIS
        
        Returns:
            (lat_min, lon_min, lat_max, lon_max)
        """
        all_lats = []
        all_lons = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_data = route.get("result", [])
        for route_item in route_data:
            maneuvers = route_item.get("maneuvers", [])
            for maneuver in maneuvers:
                outcoming_path = maneuver.get("outcoming_path", {})
                geometry_list = outcoming_path.get("geometry", [])
                
                for geom_item in geometry_list:
                    selection = geom_item.get("selection", "")
                    if selection.startswith("LINESTRING"):
                        # –ü–∞—Ä—Å–∏–º LINESTRING(37.617000 55.755000, 37.617191 55.755115)
                        coords_str = selection.replace("LINESTRING(", "").replace(")", "")
                        coord_pairs = coords_str.split(", ")
                        
                        for coord_pair in coord_pairs:
                            lon_str, lat_str = coord_pair.strip().split(" ")
                            all_lons.append(float(lon_str))
                            all_lats.append(float(lat_str))
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bbox
        if not all_lats:
            return (55.75, 37.61, 55.76, 37.63)
        
        # –†–∞—Å—à–∏—Ä—è–µ–º bbox –Ω–∞ 10% –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        lat_min, lat_max = min(all_lats), max(all_lats)
        lon_min, lon_max = min(all_lons), max(all_lons)
        
        lat_range = lat_max - lat_min
        lon_range = lon_max - lon_min
        
        return (
            lat_min - lat_range * 0.1,  # lat_min
            lon_min - lon_range * 0.1,  # lon_min  
            lat_max + lat_range * 0.1,  # lat_max
            lon_max + lon_range * 0.1   # lon_max
        )
    
    def _convert_route_to_response(
        self, 
        route: Dict, 
        request: CalmRouteRequest
    ) -> CalmRouteResponse:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç 2GIS –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        
        Args:
            route: –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç 2GIS
            request: –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        
        Returns:
            –û—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 2GIS API
        routes = []
        
        # 2GIS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ result
        route_data = route.get("result", [])
        if not route_data:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º fallback
            return self._create_fallback_route(request)
        
        for i, route_item in enumerate(route_data[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∞—Ä—à—Ä—É—Ç–∞
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
            geometry = self._extract_route_geometry(route_item)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self._extract_route_metrics(route_item)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º calm_score –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
            calm_score = self._calculate_calm_score(metrics)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            explanations = self._generate_explanations(route_item, request)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
            route_name = self._get_route_name(route_item, i)
            
            routes.append(Route(
                id=route_item.get("id", f"route_{i+1}"),
                name=route_name,
                geometry=geometry,
                metrics=metrics,
                calm_score=calm_score,
                explanations=explanations
            ))
        
        return CalmRouteResponse(routes=routes)
    
    def _extract_route_geometry(self, route_item: Dict) -> RouteGeometry:
        """–ò–∑–≤–ª–µ—á—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö 2GIS"""
        coordinates = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ maneuvers
        maneuvers = route_item.get("maneuvers", [])
        for maneuver in maneuvers:
            outcoming_path = maneuver.get("outcoming_path", {})
            geometry_list = outcoming_path.get("geometry", [])
            
            for geom_item in geometry_list:
                selection = geom_item.get("selection", "")
                if selection.startswith("LINESTRING"):
                    # –ü–∞—Ä—Å–∏–º LINESTRING(37.617000 55.755000, 37.617191 55.755115)
                    coords_str = selection.replace("LINESTRING(", "").replace(")", "")
                    coord_pairs = coords_str.split(", ")
                    
                    for coord_pair in coord_pairs:
                        lon_str, lat_str = coord_pair.strip().split(" ")
                        coordinates.append([float(lon_str), float(lat_str)])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é
        if not coordinates:
            return RouteGeometry(
                type="LineString",
                coordinates=[[37.617, 55.755], [37.625, 55.760]]
            )
        
        return RouteGeometry(
            type="LineString",
            coordinates=coordinates
        )
    
    def _extract_route_metrics(self, route_item: Dict) -> RouteMetrics:
        """–ò–∑–≤–ª–µ—á—å –º–µ—Ç—Ä–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö 2GIS"""
        # 2GIS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç distance –∏ duration –≤ route_item
        distance_m = route_item.get("total_distance", 1000)  # –≤ –º–µ—Ç—Ä–∞—Ö
        duration_sec = route_item.get("total_duration", 720)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        duration_min = duration_sec // 60
        
        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        import random
        avg_noise_db = random.uniform(60, 80)
        avg_crowd = random.uniform(1, 5)
        
        return RouteMetrics(
            distance_m=int(distance_m),
            duration_min=int(duration_min),
            avg_noise_db=round(avg_noise_db, 1),
            avg_crowd=round(avg_crowd, 1)
        )
    
    def _calculate_calm_score(self, metrics: RouteMetrics) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (0-10)"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫ —à–∫–∞–ª–µ 0-10 (10 = –ª—É—á—à–µ)
        noise_score = max(0, 10 - (metrics.avg_noise_db - 40) / 5)
        crowd_score = 10 - (metrics.avg_crowd - 1) * 2.5
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
        calm_score = (noise_score * 0.6 + crowd_score * 0.4) * 10
        
        return min(10, max(0, round(calm_score, 1)))
    
    def _generate_explanations(self, route_item: Dict, request: CalmRouteRequest) -> List[RouteExplanation]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞"""
        explanations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
        avoid = request.profile.avoid
        
        if avoid.noise_above_db:
            explanations.append(RouteExplanation(
                segment="–í–µ—Å—å –º–∞—Ä—à—Ä—É—Ç",
                reason=f"–ò–∑–±–µ–≥–∞–µ–º —à—É–º –≤—ã—à–µ {avoid.noise_above_db}–¥–ë"
            ))
        
        if avoid.crowd_level_above:
            explanations.append(RouteExplanation(
                segment="–í–µ—Å—å –º–∞—Ä—à—Ä—É—Ç", 
                reason=f"–ò–∑–±–µ–≥–∞–µ–º —Ç–æ–ª–ø—É –≤—ã—à–µ —É—Ä–æ–≤–Ω—è {avoid.crowd_level_above}"
            ))
        
        if avoid.puddles:
            explanations.append(RouteExplanation(
                segment="–í–µ—Å—å –º–∞—Ä—à—Ä—É—Ç",
                reason="–ò–∑–±–µ–≥–∞–µ–º —É—á–∞—Å—Ç–∫–∏ —Å –ª—É–∂–∞–º–∏"
            ))
        
        if avoid.light_below_lux:
            explanations.append(RouteExplanation(
                segment="–í–µ—Å—å –º–∞—Ä—à—Ä—É—Ç",
                reason=f"–ò–∑–±–µ–≥–∞–µ–º –ø–ª–æ—Ö–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∏–∂–µ {avoid.light_below_lux}–ª–∫"
            ))
        
        return explanations
    
    def _get_route_name(self, route_item: Dict, index: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
        algorithm = route_item.get("algorithm", "")
        
        if algorithm == "–∫—Ä–∞—Ç—á–∞–π—à–∏–π":
            return "–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç"
        elif algorithm == "–±—ã—Å—Ç—Ä—ã–π":
            return "–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç"
        else:
            return f"–ú–∞—Ä—à—Ä—É—Ç {index + 1}"
    
    def _create_fallback_route(self, request: CalmRouteRequest) -> CalmRouteResponse:
        """–°–æ–∑–¥–∞—Ç—å fallback –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ 2GIS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return CalmRouteResponse(
            routes=[
                Route(
                    id="fallback_route",
                    name="–ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç",
                    geometry=RouteGeometry(
                        type="LineString",
                        coordinates=[
                            [request.start.lon, request.start.lat],
                            [request.end.lon, request.end.lat]
                        ]
                    ),
                    metrics=RouteMetrics(
                        distance_m=1200,
                        duration_min=15,
                        avg_noise_db=70.0,
                        avg_crowd=3.0
                    ),
                    calm_score=6.0,
                    explanations=[
                        RouteExplanation(
                            segment="–ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç",
                            reason="2GIS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        )
                    ]
                )
            ]
        )


# Singleton
_calm_route_service = None

def get_calm_route_service() -> CalmRouteService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–ø–æ–∫–æ–π–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    global _calm_route_service
    if _calm_route_service is None:
        _calm_route_service = CalmRouteService()
    return _calm_route_service
