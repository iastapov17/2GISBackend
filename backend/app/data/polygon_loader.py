"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
–ö–∞–∂–¥—ã–π —Ç–∏–ø —Å–ª–æ—è –∏–º–µ–µ—Ç —Å–≤–æ–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
–î–ª—è —Å–≤–µ—Ç–∞ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ 2GIS API (—Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã)
"""
import json
from typing import List, Dict, Tuple, Optional
from pathlib import Path

from app.const import USE_REAL_DATA


class PolygonLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ JSON –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ª–æ—ë–≤"""
    
    def __init__(self, gis_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
        –ö–∞–∂–¥—ã–π —Ç–∏–ø —Å–ª–æ—è –∏–º–µ–µ—Ç —Å–≤–æ–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            gis_service: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 2GIS
        """
        self.gis_service = gis_service
        # –ö–∞—Ä—Ç–∞: —Ç–∏–ø —Å–ª–æ—è -> –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        self.layer_files = {
            "noise": "app/data/polygons_noise.json",
            "light": "app/data/polygons_light.json",
            "crowd": "app/data/polygons_crowd.json",
            "puddles": "app/data/polygons_puddles.json"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–æ—è
        self.polygons_by_layer = {}
        for layer_type, file_path in self.layer_files.items():
            # Light –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback
            if layer_type == "light" and self.gis_service:
                print(f"‚úÖ [LIGHT] –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è 2GIS API –¥–ª—è –ø–æ–∏—Å–∫–∞ –¢–¶")
                self.polygons_by_layer[layer_type] = []
            else:
                self.polygons_by_layer[layer_type] = self._load_data(file_path, layer_type)
    
    def _load_data(self, file_path: str, layer_type: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–æ—è
        
        Args:
            file_path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
            layer_type: —Ç–∏–ø —Å–ª–æ—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        """
        data_file = Path(file_path)
        
        if not data_file.exists():
            print(f"‚ö†Ô∏è [{layer_type.upper()}] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return []
        
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                polygons = data.get("polygons", [])
            print(f"‚úÖ [{layer_type.upper()}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ {file_path}")
            return polygons
        except json.JSONDecodeError as e:
            print(f"‚ùå [{layer_type.upper()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
        except Exception as e:
            print(f"‚ùå [{layer_type.upper()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return []
    
    def has_data_for_layer(self, layer_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–æ—è
        
        Args:
            layer_type: —Ç–∏–ø —Å–ª–æ—è (noise, light, crowd, puddles)
        
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        """
        return (
            layer_type in self.polygons_by_layer and 
            len(self.polygons_by_layer[layer_type]) > 0
        )
    
    async def find_polygons_in_bbox_async(
        self, 
        layer_type: str,
        bbox: Tuple[float, float, float, float]
    ) -> List[Dict]:
        """
        –ù–∞–π—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–æ—è –≤ bbox (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        
        –î–ª—è —Å–≤–µ—Ç–∞ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¢–¶ –∏–∑ 2GIS API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
        
        Args:
            layer_type: —Ç–∏–ø —Å–ª–æ—è (noise, light, crowd, puddles)
            bbox: (lat_min, lon_min, lat_max, lon_max)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        """
        # –î–ª—è —Å–≤–µ—Ç–∞ –ø—Ä–æ–±—É–µ–º 2GIS API
        if layer_type == "light" and self.gis_service and USE_REAL_DATA:
            try:
                print(f"‚úÖ [LIGHT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (2GIS API)")
                gis_polygons = await self.gis_service.get_light_polygons(bbox)
                print(f"‚úÖ [LIGHT] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {gis_polygons}")
                if gis_polygons:
                    return gis_polygons
            except Exception as e:
                print(f"‚ö†Ô∏è [LIGHT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ 2GIS, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
        print(f"‚úÖ [LIGHT] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã")
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã
        return self.find_polygons_in_bbox(layer_type, bbox)
    
    def find_polygons_in_bbox(
        self, 
        layer_type: str,
        bbox: Tuple[float, float, float, float]
    ) -> List[Dict]:
        """
        –ù–∞–π—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ª–æ—è –≤ bbox (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        
        Args:
            layer_type: —Ç–∏–ø —Å–ª–æ—è (noise, light, crowd, puddles)
            bbox: (lat_min, lon_min, lat_max, lon_max)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        """
        if layer_type not in self.polygons_by_layer:
            return []
        
        polygons_data = self.polygons_by_layer[layer_type]
        result = []
        
        for polygon in polygons_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å bbox
            if self._intersects_bbox(polygon["coordinates"], bbox):
                result.append(polygon)
        
        return result
    
    def _intersects_bbox(
        self, 
        coords: List[List[float]], 
        bbox: Tuple[float, float, float, float]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª–∏–≥–æ–Ω —Å bbox (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        
        –î–ª—è MVP: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ bbox
        –∏–ª–∏ bbox –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞
        """
        lat_min, lon_min, lat_max, lon_max = bbox
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞
        # GeoJSON —Ñ–æ—Ä–º–∞—Ç: [longitude, latitude]
        poly_lons = [coord[0] for coord in coords]  # longitude = coord[0]
        poly_lats = [coord[1] for coord in coords]  # latitude = coord[1]
        
        poly_lon_min = min(poly_lons)
        poly_lon_max = max(poly_lons)
        poly_lat_min = min(poly_lats)
        poly_lat_max = max(poly_lats)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        return not (
            poly_lon_max < lon_min or  # –ø–æ–ª–∏–≥–æ–Ω –ª–µ–≤–µ–µ bbox
            poly_lon_min > lon_max or  # –ø–æ–ª–∏–≥–æ–Ω –ø—Ä–∞–≤–µ–µ bbox
            poly_lat_max < lat_min or  # –ø–æ–ª–∏–≥–æ–Ω –Ω–∏–∂–µ bbox
            poly_lat_min > lat_max     # –ø–æ–ª–∏–≥–æ–Ω –≤—ã—à–µ bbox
        )
    
    def convert_to_segments(self, polygons: List[Dict]) -> List[Dict]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—à–µ–≥–æ API
        
        Args:
            polygons: —Å–ø–∏—Å–æ–∫ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ JSON
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mock_data
        """
        segments = []
        
        for i, poly in enumerate(polygons):
            # –ó–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω (–¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –≤ –∫–æ–Ω–µ—Ü)
            coords = poly["coordinates"]
            if coords[0] != coords[-1]:
                coords = coords + [coords[0]]
            
            segment = {
                "id": poly.get("id", f"polygon_{i:03d}"),
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [coords]  # Polygon —Ç—Ä–µ–±—É–µ—Ç –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤
                },
                "street_name": poly.get("street_name", ""),
                "metrics": poly.get("metrics", {}),
                "confidence": poly.get("confidence", 0.9),  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                "last_updated": poly.get("last_updated")
            }
            segments.append(segment)
        
        return segments


# Singleton
_polygon_loader: Optional[PolygonLoader] = None

def get_polygon_loader(gis_service=None) -> PolygonLoader:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    
    Args:
        gis_service: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ 2GIS
    """
    global _polygon_loader
    if _polygon_loader is None:
        _polygon_loader = PolygonLoader(gis_service=gis_service)
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ gis_service, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
    elif gis_service is not None and _polygon_loader.gis_service is None:
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º gis_service –≤ PolygonLoader")
        _polygon_loader.gis_service = gis_service
    return _polygon_loader
